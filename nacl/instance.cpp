/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include <cstdint>
#include <cstring>
#include <string>

#include <ppapi/cpp/core.h>
#include <ppapi/cpp/module.h>

#include <concrete/context.hpp>
#include <concrete/execution.hpp>
#include <concrete/objects/code.hpp>
#include <concrete/util/trace.hpp>

#include "instance.hpp"

namespace concrete {

static const uint8_t bytecode[] = {
	0143, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
	0000, 0000, 0000, 0000, 0000, 0007, 0000, 0000, 0000, 0100, 0000, 0000, 0000, 0163, 0261, 0000,
	0000, 0000, 0144, 0000, 0000, 0144, 0001, 0000, 0154, 0000, 0000, 0132, 0000, 0000, 0144, 0002,
	0000, 0204, 0000, 0000, 0132, 0001, 0000, 0144, 0003, 0000, 0204, 0000, 0000, 0132, 0002, 0000,
	0144, 0004, 0000, 0132, 0003, 0000, 0145, 0001, 0000, 0203, 0000, 0000, 0145, 0002, 0000, 0145,
	0003, 0000, 0203, 0001, 0000, 0027, 0132, 0004, 0000, 0145, 0000, 0000, 0152, 0005, 0000, 0145,
	0004, 0000, 0144, 0005, 0000, 0144, 0006, 0000, 0144, 0007, 0000, 0144, 0010, 0000, 0203, 0001,
	0002, 0144, 0011, 0000, 0027, 0132, 0004, 0000, 0145, 0006, 0000, 0144, 0012, 0000, 0145, 0004,
	0000, 0203, 0002, 0000, 0001, 0144, 0013, 0000, 0204, 0000, 0000, 0132, 0007, 0000, 0145, 0006,
	0000, 0145, 0010, 0000, 0144, 0014, 0000, 0145, 0007, 0000, 0144, 0015, 0000, 0203, 0001, 0000,
	0027, 0144, 0016, 0000, 0027, 0203, 0001, 0000, 0203, 0001, 0000, 0001, 0145, 0006, 0000, 0144,
	0017, 0000, 0145, 0011, 0000, 0144, 0001, 0000, 0203, 0001, 0000, 0203, 0002, 0000, 0001, 0145,
	0006, 0000, 0144, 0001, 0000, 0144, 0020, 0000, 0144, 0001, 0000, 0203, 0003, 0000, 0001, 0144,
	0001, 0000, 0123, 0050, 0021, 0000, 0000, 0000, 0151, 0000, 0000, 0000, 0000, 0116, 0143, 0000,
	0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0000, 0000, 0000, 0103,
	0000, 0000, 0000, 0163, 0004, 0000, 0000, 0000, 0144, 0001, 0000, 0123, 0050, 0002, 0000, 0000,
	0000, 0116, 0151, 0005, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000,
	0000, 0050, 0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000, 0165, 0031, 0000, 0000, 0000,
	0144, 0145, 0142, 0165, 0147, 0057, 0157, 0142, 0152, 0057, 0145, 0170, 0141, 0155, 0160, 0154,
	0145, 0057, 0164, 0145, 0163, 0164, 0056, 0160, 0171, 0165, 0005, 0000, 0000, 0000, 0146, 0165,
	0156, 0143, 0060, 0003, 0000, 0000, 0000, 0163, 0002, 0000, 0000, 0000, 0000, 0001, 0143, 0001,
	0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0000, 0000, 0000, 0002, 0000, 0000, 0000, 0103,
	0000, 0000, 0000, 0163, 0010, 0000, 0000, 0000, 0174, 0000, 0000, 0144, 0001, 0000, 0027, 0123,
	0050, 0002, 0000, 0000, 0000, 0116, 0151, 0002, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000,
	0050, 0001, 0000, 0000, 0000, 0165, 0005, 0000, 0000, 0000, 0166, 0141, 0154, 0165, 0145, 0050,
	0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000, 0165, 0031, 0000, 0000, 0000, 0144, 0145,
	0142, 0165, 0147, 0057, 0157, 0142, 0152, 0057, 0145, 0170, 0141, 0155, 0160, 0154, 0145, 0057,
	0164, 0145, 0163, 0164, 0056, 0160, 0171, 0165, 0005, 0000, 0000, 0000, 0146, 0165, 0156, 0143,
	0061, 0006, 0000, 0000, 0000, 0163, 0002, 0000, 0000, 0000, 0000, 0001, 0151, 0012, 0000, 0000,
	0000, 0165, 0003, 0000, 0000, 0000, 0146, 0157, 0157, 0151, 0120, 0000, 0000, 0000, 0165, 0003,
	0000, 0000, 0000, 0142, 0141, 0162, 0165, 0007, 0000, 0000, 0000, 0152, 0145, 0160, 0040, 0152,
	0145, 0160, 0151, 0350, 0003, 0000, 0000, 0165, 0003, 0000, 0000, 0000, 0162, 0040, 0075, 0143,
	0001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0001, 0000, 0000, 0000, 0001, 0000, 0000, 0000,
	0103, 0000, 0000, 0000, 0163, 0004, 0000, 0000, 0000, 0174, 0000, 0000, 0123, 0050, 0001, 0000,
	0000, 0000, 0116, 0050, 0000, 0000, 0000, 0000, 0050, 0001, 0000, 0000, 0000, 0165, 0001, 0000,
	0000, 0000, 0170, 0050, 0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000, 0165, 0031, 0000,
	0000, 0000, 0144, 0145, 0142, 0165, 0147, 0057, 0157, 0142, 0152, 0057, 0145, 0170, 0141, 0155,
	0160, 0154, 0145, 0057, 0164, 0145, 0163, 0164, 0056, 0160, 0171, 0165, 0013, 0000, 0000, 0000,
	0160, 0141, 0163, 0163, 0164, 0150, 0162, 0157, 0165, 0147, 0150, 0016, 0000, 0000, 0000, 0163,
	0002, 0000, 0000, 0000, 0000, 0001, 0165, 0005, 0000, 0000, 0000, 0150, 0145, 0154, 0154, 0157,
	0165, 0001, 0000, 0000, 0000, 0040, 0165, 0005, 0000, 0000, 0000, 0167, 0157, 0162, 0154, 0144,
	0165, 0012, 0000, 0000, 0000, 0151, 0144, 0050, 0116, 0157, 0156, 0145, 0051, 0040, 0075, 0151,
	0322, 0004, 0000, 0000, 0050, 0013, 0000, 0000, 0000, 0165, 0010, 0000, 0000, 0000, 0143, 0157,
	0156, 0143, 0162, 0145, 0164, 0145, 0165, 0005, 0000, 0000, 0000, 0146, 0165, 0156, 0143, 0060,
	0165, 0005, 0000, 0000, 0000, 0146, 0165, 0156, 0143, 0061, 0165, 0001, 0000, 0000, 0000, 0170,
	0165, 0001, 0000, 0000, 0000, 0162, 0165, 0004, 0000, 0000, 0000, 0164, 0145, 0163, 0164, 0165,
	0005, 0000, 0000, 0000, 0160, 0162, 0151, 0156, 0164, 0165, 0013, 0000, 0000, 0000, 0160, 0141,
	0163, 0163, 0164, 0150, 0162, 0157, 0165, 0147, 0150, 0165, 0004, 0000, 0000, 0000, 0162, 0145,
	0160, 0162, 0165, 0002, 0000, 0000, 0000, 0151, 0144, 0165, 0004, 0000, 0000, 0000, 0116, 0157,
	0156, 0145, 0050, 0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000, 0000, 0050, 0000, 0000, 0000,
	0000, 0165, 0031, 0000, 0000, 0000, 0144, 0145, 0142, 0165, 0147, 0057, 0157, 0142, 0152, 0057,
	0145, 0170, 0141, 0155, 0160, 0154, 0145, 0057, 0164, 0145, 0163, 0164, 0056, 0160, 0171, 0165,
	0010, 0000, 0000, 0000, 0074, 0155, 0157, 0144, 0165, 0154, 0145, 0076, 0001, 0000, 0000, 0000,
	0163, 0024, 0000, 0000, 0000, 0014, 0002, 0011, 0003, 0011, 0003, 0006, 0001, 0023, 0001, 0037,
	0001, 0015, 0002, 0011, 0003, 0036, 0001, 0023, 0001
};

NaClInstance::NaClInstance(PP_Instance instance):
	pp::Instance(instance),
	m_callback_factory(this),
	m_event_loop(*this)
{
}

void NaClInstance::HandleMessage(const pp::Var &var_message)
{
	if (var_message.is_string()) {
		std::string message = var_message.AsString();
		if (message == "run")
			run();
	}
}

void NaClInstance::run()
{
	if (m_context)
		return;

	m_context.reset(new Context(m_event_loop));

	ScopedContext activate(*m_context.get());
	m_context->add_execution(Execution::New(CodeObject::Load(bytecode, sizeof (bytecode))));

	execute();
}

void NaClInstance::execute()
{
	auto callback = m_callback_factory.NewCallback(&NaClInstance::do_execute);
	pp::Module::Get()->core()->CallOnMainThread(0, callback);
}

void NaClInstance::do_execute(int32_t dummy)
{
	Trace("nacl executing");

	ScopedContext activate(*m_context.get());
	while (m_context->execute());

	if (!m_context->executable())
		m_context.reset();

	Trace("nacl executed");
}

} // namespace
